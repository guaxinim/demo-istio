---
- hosts: localhost
  name: "Setup da Demo do Istio no Openshift"
  connection: local
  vars:
    istio_version: 1.0.3
    kiali_version: v0.9.1

  tasks:

    - name: Configurando Minishift profile Istio
      shell: minishift profile set istio-work

    - name: Configurando Minishift 8GB, 3 CPUs and image caching
      shell: "minishift config set {{ item }}"
      with_items:
        - "memory 8GB"
        - "cpus 3"
        - "image-caching true"

    - name: Configurando Minishift driver xhyve for MacOSX
      shell: minishift config set vm-driver xhyve
      when: ansible_distribution == "MacOSX"

    - name: Configurando Minishift addons
      shell: "minishift addon enable {{ item }}"
      with_items:
        - admin-user
        - anyuid

    - name: Iniciando minishift...
      shell: minishift --profile istio-work start

    - name: Openshift login com o usuário de sistema
      shell: oc login $(minishift ip):8443 -u admin -p admin

    # - name: Download do Istio for OSX
    #   unarchive: 
    #     src: https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-osx.tar.gz
    #     dest: istio-1.0.3
    #     remote_src: yes

    # - name: Download do Istio for OSX
    #   shell: "curl -L https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-osx.tar.gz | tar xz"
    #   when: ansible_distribution == "MacOSX"
    
    - name: Download do Istio for OSX
      get_url: 
        url: https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-osx.tar.gz
        dest: /tmp/istio.tar.gz
      when: ansible_distribution == "MacOSX"

    - name: Download do Istio for Linux
      get_url: 
        url: https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux.tar.gz
        dest: /tmp/istio.tar.gz
      when: ansible_distribution != "MacOSX"

    - name: Extract istio
      shell: tar -zxvf /tmp/istio.tar.gz -C istio-{{ istio_version }}

    # - name: Download do Istio for Linux
    #   shell: "curl -L https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux.tar.gz | tar xz"
    #   when: ansible_distribution != "MacOSX"

    - name: Instalando crds.yaml
      shell: "oc apply -f istio-{{ istio_version }}/install/kubernetes/helm/istio/templates/crds.yaml"

    - name: Instalando istio-demo.yaml
      shell: "oc apply -f istio-{{ istio_version }}/install/kubernetes/istio-demo.yaml"

    - name: Criando projeto istio-system
      shell: oc new-project istio-system || oc project istio-system

    - name: Expondo istio services 
      shell: "oc expose svc {{ item }} -n istio-system || echo 'Já existe'"
      with_items:
        - istio-ingressgateway
        - servicegraph
        - grafana
        - prometheus
        - tracing

    - name: Aguardando containers do istio
      shell: test $(oc get po | grep Running | wc -l) -gt 11
      register: istio_containers
      until: istio_containers.rc == 0
      retries: 60
      delay: 20

    - name: New project tutorial
      shell: oc new-project tutorial || oc project tutorial

    - name: Policy anyuid
      shell: oc adm policy add-scc-to-user privileged -z default -n tutorial

    - name: Git clone istio-tutorial
      git:
        repo: https://github.com/guaxinim/istio-tutorial
        dest: istio-tutorial
        force: yes

    - name: Iniciando build projeto Customer
      shell: oc new-app --name=customer --context-dir=customer/java/springboot -e JAEGER_SERVICE_NAME=customer JAEGER_ENDPOINT=http://jaeger-collector.istio-system.svc:14268/api/traces JAEGER_PROPAGATION=b3 JAEGER_SAMPLER_TYPE=const JAEGER_SAMPLER_PARAM=1 JAVA_OPTIONS='-Xms128m -Xmx256m -Djava.net.preferIPv4Stack=true' fabric8/s2i-java~https://github.com/guaxinim/istio-tutorial -o yaml  > customer.yml

    - name: Criando objetos a partir do template Customer
      shell: "./istio-{{ istio_version }}/bin/istioctl kube-inject -f customer.yml -n tutorial | oc apply -f -"

    - name: Expondo servico customer
      shell: oc apply -f istio-tutorial/customer/kubernetes/Service.yml -n tutorial

    - name: Exponde servico customer
      shell: oc expose service customer -n tutorial || echo 'Já existe'

    - name: Iniciando build projeto Preference
      shell: oc new-app -n tutorial -l app=preference,version=v1 --name=preference-v1 --context-dir=preference/java/springboot -e JAEGER_SERVICE_NAME=preference JAEGER_ENDPOINT=http://jaeger-collector.istio-system.svc:14268/api/traces JAEGER_PROPAGATION=b3 JAEGER_SAMPLER_TYPE=const JAEGER_SAMPLER_PARAM=1 JAVA_OPTIONS='-Xms128m -Xmx256m -Djava.net.preferIPv4Stack=true' fabric8/s2i-java~https://github.com/guaxinim/istio-tutorial -o yaml  > preference.yml

    - name: Criando objetos a partir do template preference
      shell: "./istio-{{ istio_version }}/bin/istioctl kube-inject -f preference.yml -n tutorial | oc apply -f -"

    - name: Expondo servico preference
      shell: oc apply -f istio-tutorial/preference/kubernetes/Service.yml -n tutorial

    - name: Iniciando build projeto Recommendation
      shell: oc new-app -n tutorial -l app=recommendation,version=v1 --name=recommendation-v1 --context-dir=recommendation/java/vertx JAVA_OPTIONS='-Xms128m -Xmx256m -Djava.net.preferIPv4Stack=true' fabric8/s2i-java~https://github.com/guaxinim/istio-tutorial -o yaml  > recommendation.yml

    - name: Criando objetos a partir do template recommendation
      shell: "./istio-{{ istio_version }}/bin/istioctl kube-inject -f recommendation.yml -n tutorial | oc apply -f -"

    #- name: Expondo servico recommendation
    #  shell: oc delete svc/recommendation-v1 -n tutorial

    - name: Expondo servico recommendation
      shell: oc apply -f istio-tutorial/recommendation/kubernetes/Service.yml -n tutorial

    - name: Aguardando build do projeto Recomendation
      shell: oc get po -n tutorial | grep -v build | grep Running
      register: recom
      until: recom.stdout.find("recommendation") != -1
      retries: 60
      delay: 30

    - name: Testando projeto Preference
      shell: curl customer-tutorial.$(minishift ip).nip.io
      register: rectut
      until: rectut.stdout.find("recommendation v1 from") != -1
      retries: 60
      delay: 5

    - name: Projeto istio-system
      shell: oc project istio-system

    - name: Criando kiali config-map
      shell: "curl https://raw.githubusercontent.com/kiali/kiali/{{ kiali_version }}/deploy/openshift/kiali-configmap.yaml | VERSION_LABEL={{ kiali_version }} JAEGER_URL=https://jaeger-query-istio-system.$(minishift ip).nip.io GRAFANA_URL=https://grafana-istio-system.$(minishift ip).nip.io envsubst | oc apply -n istio-system -f -"

    - name: Criando kiali secrets
      shell: "curl https://raw.githubusercontent.com/kiali/kiali/{{ kiali_version }}/deploy/openshift/kiali-secrets.yaml | VERSION_LABEL={{ kiali_version }} envsubst | oc apply -n istio-system -f -"

    - name: Criando kiali
      shell: "curl https://raw.githubusercontent.com/kiali/kiali/{{ kiali_version }}/deploy/openshift/kiali.yaml | VERSION_LABEL={{ kiali_version }} IMAGE_NAME=kiali/kiali IMAGE_VERSION={{ kiali_version }} NAMESPACE=istio-system VERBOSE_MODE=4 IMAGE_PULL_POLICY_TOKEN='imagePullPolicy: Always' envsubst | oc apply -n istio-system -f - "